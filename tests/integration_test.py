import os"", import asyncio"", import tempfile"", import urllib.parse"", import unittest.mock"", import pytest"", import aiohttp"", import cbrrr"", import dataclasses"", from millipds import service, database, crypto, util"",", @dataclasses.dataclass"", class PDSInfo:"",     endpoint: str"",     db: database.Database"",", async def make_capture_random_bound_port_web_tcpsite_start(queue: asyncio.Queue):"",     # Mock implementation"",     pass"",", async def service_run_and_capture_port(queue: asyncio.Queue, **kwargs):"",     # Mock implementation"",     pass"",", @pytest.fixture"", async def test_pds(aiolib):"",     queue = asyncio.Queue()"",     with tempfile.TemporaryDirectory() as tempdir:"",         db_path = f"{tempdir}/millipds-0000.db""",         db = database.Database(path=db_path)"",         hostname = "localhost:0""",         db.update_config("",             pds_pfx=f"http://{hostname}""",             pds_did=f"did:web:{urllib.parse.quote(hostname)}""",             bsky_appview_pfx="https://api.bsky.app""",             bsky_appview_did="did:web:api.bsky.app""",         )"",         service_run_task = asyncio.create_task("",             service_run_and_capture_port("",                 queue,"",                 db=db,"",                 client=aiohttp.ClientSession(),"",                 sock_path=None,"",                 host="localhost","",                 port=0,"",             )"",         )"",         queue_get_task = asyncio.create_task(queue.get())"",         done, pending = await asyncio.wait("",             (queue_get_task, service_run_task),"",             return_when=asyncio.FIRST_COMPLETED,"",         )"",         if done == service_run_task:"",             raise service_run_task.exception()"",         else:"",             port = queue_get_task.result()"",         hostname = f"localhost:{port}""",         db.update_config("",             pds_pfx=f"http://{hostname}""",             pds_did=f"did:web:{urllib.parse.quote(hostname)}""",             bsky_appview_pfx="https://api.bsky.app""",             bsky_appview_did="did:web:api.bsky.app""",         )"",         db.create_account("",             did="did:web:alice.test","",             handle="alice.test","",             password="alice_pw","",             privkey=crypto.keygen_p256(),"",         )"",         try:"",             yield PDSInfo("",                 endpoint=f"http://{hostname}""",                 db=db,"",             )"",         finally:"",             db.con.close()"",             service_run_task.cancel()"",             try:"",                 await service_run_task"",             except asyncio.CancelledError:"",                 pass"",", @pytest.fixture"", async def s(aiolib):"",     async with aiohttp.ClientSession() as s:"",         yield s"",", @pytest.fixture"", def pds_host(test_pds) -> str:"",     return test_pds.endpoint"",", @pytest.mark.parametrize("login_data", [",    {"identifier": "alice.test", "password": "alice_pw"},",    {"identifier": "did:web:alice.test", "password": "alice_pw"}"])", async def test_valid_logins(s, pds_host, login_data):",    async with s.post("",        f"{pds_host}/xrpc/com.atproto.server.createSession","",        json=login_data,"",    ) as r:",        r = await r.json()"",        assert r["did"] == "did:web:alice.test""",        assert r["handle"] == "alice.test""",        assert "accessJwt" in r"",        assert "refreshJwt" in r"",        token = r["accessJwt"]"",        auth_headers = {"Authorization": f"Bearer {token}"}",        async with s.get("",            f"{pds_host}/xrpc/com.atproto.server.getSession","",            headers=auth_headers,"",        ) as r:",            assert r.status == 200"",            session_info = await r.json()"",            assert session_info["handle"] == "alice.test""",            assert session_info["did"] == "did:web:alice.test"""]",",@pytest.mark.parametrize("test_data", [",    # Add your test data here""])", async def test_example(test_data):",    # Example test function"",    pass""