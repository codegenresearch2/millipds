import os\nimport asyncio\nimport tempfile\nimport urllib.parse\nimport unittest.mock\nimport pytest\nimport aiohttp\nimport cbrrr\nimport dataclasses\nfrom millipds import service, database, crypto, util\n\n@dataclasses.dataclass\nclass PDSInfo:\n    endpoint: str\n    db: database.Database\n\nasync def make_capture_random_bound_port_web_tcpsite_start(queue: asyncio.Queue):\n    # Mock implementation\n    pass\n\nasync def service_run_and_capture_port(queue: asyncio.Queue, **kwargs):\n    # Mock implementation\n    pass\n\n@pytest.fixture\nasync def test_pds(aiolib):\n    queue = asyncio.Queue()\n    with tempfile.TemporaryDirectory() as tempdir:\n        db_path = f"{tempdir}/millipds-0000.db"\n        db = database.Database(path=db_path)\n        hostname = "localhost:0"\n        db.update_config(\n            pds_pfx=f"http://{hostname}",\n            pds_did=f"did:web:{urllib.parse.quote(hostname)}",\n            bsky_appview_pfx="https://api.bsky.app",\n            bsky_appview_did="did:web:api.bsky.app"\n        )\n        service_run_task = asyncio.create_task(\n            service_run_and_capture_port(\n                queue,\n                db=db,\n                client=aiohttp.ClientSession(),\n                sock_path=None,\n                host="localhost",\n                port=0,\n            )\n        )\n        queue_get_task = asyncio.create_task(queue.get())\n        done, pending = await asyncio.wait(\n            (queue_get_task, service_run_task),\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if done == service_run_task:\n            raise service_run_task.exception()\n        else:\n            port = queue_get_task.result()\n        hostname = f"localhost:{port}"\n        db.update_config(\n            pds_pfx=f"http://{hostname}",\n            pds_did=f"did:web:{urllib.parse.quote(hostname)}",\n            bsky_appview_pfx="https://api.bsky.app",\n            bsky_appview_did="did:web:api.bsky.app"\n        )\n        db.create_account(\n            did="did:web:alice.test",\n            handle="alice.test",\n            password="alice_pw",\n            privkey=crypto.keygen_p256(),\n        )\n        try:\n            yield PDSInfo(\n                endpoint=f"http://{hostname}",\n                db=db,\n            )\n        finally:\n            db.con.close()\n            service_run_task.cancel()\n            try:\n                await service_run_task\n            except asyncio.CancelledError:\n                pass\n\n@pytest.fixture\nasync def s(aiolib):\n    async with aiohttp.ClientSession() as s:\n        yield s\n\n@pytest.fixture\ndef pds_host(test_pds) -> str:\n    return test_pds.endpoint\n\n@pytest.mark.parametrize("login_data", [\n    {"identifier": "alice.test", "password": "alice_pw"},\n    {"identifier": "did:web:alice.test", "password": "alice_pw"}\n])\nasync def test_valid_logins(s, pds_host, login_data):\n    async with s.post(\n        f"{pds_host}/xrpc/com.atproto.server.createSession",\n        json=login_data,\n    ) as r:\n        r = await r.json()\n        assert r["did"] == "did:web:alice.test"\n        assert r["handle"] == "alice.test"\n        assert "accessJwt" in r\n        assert "refreshJwt" in r\n        token = r["accessJwt"]\n        auth_headers = {"Authorization": f"Bearer {token}"}\n        async with s.get(\n            f"{pds_host}/xrpc/com.atproto.server.getSession",\n            headers=auth_headers,\n        ) as r:\n            assert r.status == 200\n            session_info = await r.json()\n            assert session_info["handle"] == "alice.test"\n            assert session_info["did"] == "did:web:alice.test"\n\n@pytest.mark.parametrize("test_data", [\n    # Add your test data here\n])\nasync def test_example(test_data):\n    # Example test function\n    pass\n