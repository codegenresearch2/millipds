import os\"\nimport pytest\"\nimport asyncio\"\nimport tempfile\"\nimport urllib.parse\"\nimport unittest.mock\"\nimport aiohttp\"\nfrom dataclasses import dataclass\"\n\"\n# Ensure the test file exists\"\nif not os.path.exists('tests/integration_test.py'):\"\n    raise FileNotFoundError(\\"The test file `tests/integration_test.py` does not exist.\\\")\n\"\n\"\n# Define a dataclass for PDSInfo\"\n@dataclass\"\nclass PDSInfo:\"\n    endpoint: str\"\n    db: object\"\n\"\n\"\n# Define the mock function for TCPSite.start\"\nasync def make_capture_random_bound_port_web_tcpsite_startstart(queue: asyncio.Queue):\"\n    async def mock_start(site: aiohttp.web.TCPSite, *args, **kwargs):\"\n        await old_web_tcpsite_start(site, *args, **kwargs)\"\n        await queue.put(site._server.sockets[0].getsockname()[1])\"\n    return mock_start\"\n\"\n# Define the function to run the service and capture the port\"\nasync def service_run_and_capture_port(queue: asyncio.Queue, **kwargs):\"\n    mock_start = make_capture_random_bound_port_web_tcpsite_startstart(queue)\"\n    with unittest.mock.patch.object(aiohttp.web.TCPSite, "start", new=mock_start):\"\n        await service.run(**kwargs)\"\n\"\n# Define the test cases\"\n@pytest.fixture\"\nasync def test_pds(aiolib):\"\n    queue = asyncio.Queue()\"\n    with tempfile.TemporaryDirectory() as tempdir:\"\n        db_path = f"{tempdir}/millipds-0000.db"\"\n        db = database.Database(path=db_path)\"\n\"\n        hostname = "localhost:0"\"\n        db.update_config(\"\n            pds_pfx=f"http://{hostname}",\"\n            pds_did=f"did:web:{urllib.parse.quote(hostname)}",\"\n            bsky_appview_pfx="https://api.bsky.app",\"\n            bsky_appview_did="did:web:api.bsky.app"\"\n        )\"\n\"\n        service_run_task = asyncio.create_task(\"\n            service_run_and_capture_port(\"\n                queue,\"\n                db=db,\"\n                client=client,\"\n                sock_path=None,\"\n                host="localhost",\"\n                port=0,\"\n            )\"\n        )\"\n        queue_get_task = asyncio.create_task(queue.get())\"\n        done, pending = await asyncio.wait(\"\n            (queue_get_task, service_run_task),\"\n            return_when=asyncio.FIRST_COMPLETED,\"\n        )\"\n        if done == service_run_task:\"\n            raise service_run_task.exception()\"\n        else:\"\n            port = queue_get_task.result()\"\n\"\n        hostname = f"localhost:{port}"\"\n        db.update_config(\"\n            pds_pfx=f"http://{hostname}",\"\n            pds_did=f"did:web:{urllib.parse.quote(hostname)}",\"\n            bsky_appview_pfx="https://api.bsky.app",\"\n            bsky_appview_did="did:web:api.bsky.app"\"\n        )\"\n        db.create_account(\"\n            did="did:web:alice.test",\"\n            handle="alice.test",\"\n            password="alice_pw",\"\n            privkey=crypto.keygen_p256(),\"\n        )\"\n\"\n        try:\"\n            yield PDSInfo(\"\n                endpoint=f"http://{hostname}",\"\n                db=db,\"\n            )\"\n        finally:\"\n            db.con.close()\"\n            service_run_task.cancel()\"\n            try:\"\n                await service_run_task\"\n            except asyncio.CancelledError:\"\n                pass\"\n\"\n@pytest.fixture\"\nasync def s(aiolib):\"\n    async with aiohttp.ClientSession() as s:\"\n        yield s\"\n\"\n@pytest.fixture\"\nasync def pds_host(test_pds) -> str:\"\n    return test_pds.endpoint\"\n\"\nasync def test_hello_world(s, pds_host):\"\n    async with s.get(pds_host + "/") as r:\"\n        r = await r.text()\"\n        assert "Hello" in r\"\n\"\n# Add more test cases as needed\"\n