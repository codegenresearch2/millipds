import importlib.metadata\\nimport logging\\nimport asyncio\\nimport json\\nimport aiohttp\\nfrom aiohttp import web\\nimport jwt\\n\\nimport cbrrr\\n\\nfrom . import static_config\\nfrom . import database\\nfrom . import auth_oauth\\nfrom . import atproto_sync\\nfrom . import atproto_repo\\nfrom . import util\\nfrom .appview_proxy import service_proxy\\nfrom .auth_bearer import authenticated\\nfrom .app_util import *\\n\\nlogger = logging.getLogger(__name__)\\\\\\\n\\nroutes = web.RouteTableDef()\\n\\n@web.middleware\\nasync def atproto_service_proxy_middleware(request: web.Request, handler):\\n    # https://atproto.com/specs/xrpc#service-proxying\\n    atproto_proxy = request.headers.get("atproto-proxy")\\\\\\\n    if atproto_proxy:\\\\\\\\\n        return await service_proxy(request, atproto_proxy)\\\\\\\n    \\\\\\\\\n    # else, normal response\\n    res: web.Response = await handler(request)\\\\\\\n    \\\\\\\\\n    # inject security headers (this should really be a separate middleware, but here works too)\\\\\\\n    res.headers.setdefault("X-Frame-Options", "DENY")\\\\\\\n    res.headers.setdefault("X-Content-Type-Options", "nosniff")\\\\\\\n    res.headers.setdefault("Content-Security-Policy", "default-src 'none'; sandbox")\\\\\\\n    # NB: HSTS and other TLS-related headers not set, set them in nginx or wherever you terminate TLS\\n    \\\\\\\\\n    return res\\n