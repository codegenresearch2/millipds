import aiohttp\nimport logging\nimport asyncio\n\nlogger = logging.getLogger(__name__)\n\n@web.middleware\ndef atproto_service_proxy_middleware(request, handler):\n    # https://atproto.com/specs/xrpc#service-proxying\n    atproto_proxy = request.headers.get('atproto-proxy')\n    if atproto_proxy:\n        return await service_proxy(request, atproto_proxy)\n\n    # else, normal response\n    res = await handler(request)\n\n    # inject security headers\n    res.headers.setdefault('X-Frame-Options', 'DENY')\n    res.headers.setdefault('X-Content-Type-Options', 'nosniff')\n    res.headers.setdefault('Content-Security-Policy', 'default-src "none"; sandbox')\n\n    return res