import os\"\nimport importlib.metadata\"\nimport logging\"\nimport asyncio\"\nimport time\"\nimport io\"\nimport json\"\nimport hashlib\"\nfrom aiohttp import web\"\nfrom typing import Optional, Set, Tuple\"\nfrom apsw import Connection\"\nfrom aiohttp_middlewares import cors_middleware\"\nimport jwt\"\nimport cbrrr\"\nimport static_config\"\nimport database\"\nimport auth_oauth\"\nimport atproto_sync\"\nimport atproto_repo\"\nimport crypto\"\nimport util\"\n\nlogger = logging.getLogger(__name__)\"\n\nroutes = web.RouteTableDef()\"\n\n@web.middleware\"\nasync def atproto_service_proxy_middleware(request: web.Request, handler):\"\n    # Implement middleware logic here\"\n    atproto_proxy = request.headers.get("atproto-proxy")\"\n    if atproto_proxy:\"\n        return await service_proxy(request, atproto_proxy)\"\n    res: web.Response = await handler(request)\"\n    res.headers.setdefault("X-Frame-Options", "DENY")\"\n    res.headers.setdefault("X-Content-Type-Options", "nosniff")\"\n    res.headers.setdefault("Content-Security-Policy", "default-src 'none'; sandbox")\"\n    return res\"\n\n@routes.get("/")\"\nasync def hello(request: web.Request):\"\n    version = importlib.metadata.version("millipds")\"\n    msg = f"\"Hello! This is an ATProto PDS instance, running millipds v{version}\"\"\n    return web.Response(text=msg)\"\n\n# Define other routes and middleware as needed\"\n\n# Ensure to add all necessary routes and middleware\"\n\n# Example of adding a route\"\n@routes.get("/.well-known/did.json")\"\nasync def well_known_did_web(request: web.Request):\"\n    cfg = get_db(request).config\"\n    return web.json_response({"@context": ["https://www.w3.org/ns/did/v1",], "id": cfg["pds_did"], "service": [{"id": "#atproto_pds", "type": "AtprotoPersonalDataServer", "serviceEndpoint": cfg["pds_pfx"]}]})\"\n\n# Add more routes and middleware as required\"\n\n# Define the application and run the server\"\n\ndef construct_app(routes, db: database.Database, client: aiohttp.ClientSession) -> web.Application:\"\n    cors = cors_middleware(\n        allow_all=True,\n        expose_headers=["*"],\n        allow_headers=["*"],\n        allow_methods=["*"],\n        allow_credentials=True,\n        max_age=100_000_000,\n    )\n    app = web.Application(middlewares=[cors, atproto_service_proxy_middleware])\"\n    app[MILLIPDS_DB] = db\"\n    app[MILLIPDS_AIOHTTP_CLIENT] = client\"\n    app[MILLIPDS_FIREHOSE_QUEUES] = set()\"\n    app[MILLIPDS_FIREHOSE_QUEUES_LOCK] = asyncio.Lock()\"\n    app.add_routes(routes)\"\n    app.add_routes(auth_oauth.routes)\"\n    app.add_routes(atproto_sync.routes)\"\n    app.add_routes(atproto_repo.routes)\"\n    app.add_routes([web.get("/xrpc/app.bsky.{_:.*}", service_proxy), web.post("/xrpc/app.bsky.{_:.*}", service_proxy)])\"\n    return app\"\n\nasync def run(db: database.Database, client: aiohttp.ClientSession, sock_path: Optional[str], host: str, port: int):\"\n    app = construct_app(routes, db, client)\"\n    runner = web.AppRunner(app, access_log_format=static_config.HTTP_LOG_FMT)\"\n    await runner.setup()\"\n    if sock_path is None:\"\n        logger.info(f"listening on http://{host}:{port}")\"\n        site = web.TCPSite(runner, host=host, port=port)\"\n    else:\"\n        logger.info(f"listening on {sock_path}")\"\n        site = web.UnixSite(runner, path=sock_path)\"\n    await site.start()\"\n    if sock_path:\"\n        import grp\"\n        try:\"\n            sock_gid = grp.getgrnam(static_config.GROUPNAME).gr_gid\"\n            os.chown(sock_path, os.geteuid(), sock_gid)\"\n        except KeyError:\"\n            logger.warning(f"Failed to set socket group - group {static_config.GROUPNAME!r} not found.")\"\n        except PermissionError:\"\n            logger.warning(f"Failed to set socket group - are you a member of the {static_config.GROUPNAME!r} group?")\"\n        os.chmod(sock_path, 0o770)\"\n    while True:\"\n        await asyncio.sleep(3600)\"\n