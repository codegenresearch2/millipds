from typing import Optional, Set, Tuple, Any\nimport importlib.metadata\nimport logging\nimport asyncio\nimport time\nimport os\nimport json\nimport hashlib\nimport base64\nimport urllib.parse\nfrom getpass import getpass\n\nfrom docopt import docopt\nimport aiohttp\n\nimport cbrrr\n\nfrom . import service\nfrom . import database\nfrom . import crypto\nfrom . import util\nfrom .appview_proxy import service_proxy\nfrom .auth_bearer import authenticated\nfrom .app_util import *\n\nlogger = logging.getLogger(__name__)\n\n__all__ = [\n    'service_proxy', 'authenticated', 'crypto', 'util', 'database', 'MILLIPDS_DB', 'MILLIPDS_AIOHTTP_CLIENT', 'MILLIPDS_FIREHOSE_QUEUES', 'MILLIPDS_FIREHOSE_QUEUES_LOCK', 'MILLIPDS_DID_RESOLVER', 'get_db', 'get_client', 'get_firehose_queues', 'get_firehose_queues_lock', 'get_did_resolver'\n]\n\nroutes = web.RouteTableDef()\n\n@web.middleware\nasync def atproto_service_proxy_middleware(request: web.Request, handler):\n    atproto_proxy = request.headers.get('atproto-proxy')\n    if atproto_proxy:\n        return await service_proxy(request, atproto_proxy)\n\n    res: web.Response = await handler(request)\n\n    res.headers.setdefault('X-Frame-Options', 'DENY')\n    res.headers.setdefault('X-Content-Type-Options', 'nosniff')\n    res.headers.setdefault('Content-Security-Policy', 'default-src \