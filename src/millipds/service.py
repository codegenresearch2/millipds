from typing import Optional, Set, Tuple, Dict, Any, List\\nimport importlib.metadata\\nimport logging\\nimport asyncio\\nimport time\\nimport os\\nimport io\\nimport json\\nimport hashlib\\nimport base64\\nimport urllib.parse\\nfrom getpass import getpass\\nfrom aiohttp import web\\nimport aiohttp\\nimport jwt\\nimport cbrrr\\nfrom . import static_config\\nfrom . import database\\nfrom . import auth_oauth\\nfrom . import atproto_sync\\nfrom . import atproto_repo\\nfrom . import crypto\\nfrom . import util\\nfrom .appview_proxy import service_proxy\\nfrom .auth_bearer import authenticated\\nfrom .app_util import *\\nlogger = logging.getLogger(__name__)\\nroutes = web.RouteTableDef()\\n\\n@web.middleware\\nasync def atproto_service_proxy_middleware(request: web.Request, handler):\\n    # https://atproto.com/specs/xrpc#service-proxying\\n    atproto_proxy = request.headers.get(\\"atproto-proxy\\")\\n    if atproto_proxy:\\n        return await service_proxy(request, atproto_proxy)\\n    res: web.Response = await handler(request)\\n    res.headers.setdefault(\\"X-Frame-Options\\", \\\"DENY\\")\\n    res.headers.setdefault(\\"X-Content-Type-Options\\", \\\"nosniff\\")\\n    res.headers.setdefault(\\"Content-Security-Policy\\", \\\"default-src 'none'; sandbox\\")\\n    return res\\n\\n@routes.get(\\"/\\")\\nasync def hello(request: web.Request):\\n    version = importlib.metadata.version(\\"millipds\\")\\n    msg = f\\"\\n                          ,dPYb, ,dPYb,                           8I\\n                          IP'`Yb IP'`Yb                           8I\\n                     gg   I8  8I I8  8I  gg                       8I\\n                     "\\