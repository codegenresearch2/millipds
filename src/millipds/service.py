from typing import Optional, Set, Tuple\\nimport importlib.metadata\\nimport logging\\nimport asyncio\\nimport time\\nimport os\\nimport io\\nimport json\\nimport uuid\\nimport hashlib\\n\\nimport apsw\\nimport aiohttp\\nfrom aiohttp_middlewares import cors_middleware\\nfrom aiohttp import web\\nimport jwt\\n\\nimport cbrrr\\n\\nfrom . import static_config\\nfrom . import database\\nfrom . import auth_oauth\\nfrom . import atproto_sync\\nfrom . import atproto_repo\\nfrom . import crypto\\nfrom . import util\\nfrom .appview_proxy import service_proxy\\nfrom .auth_bearer import authenticated\\nfrom .app_util import *\\nfrom .did import DIDResolver\\n\\nlogger = logging.getLogger(__name__)\\n\\nroutes = web.RouteTableDef()\\n\\n@web.middleware\\ndef atproto_service_proxy_middleware(request: web.Request, handler):\\n    # https://atproto.com/specs/xrpc#service-proxying\\n    atproto_proxy = request.headers.get(\\"atproto-proxy\\")\\n    if atproto_proxy:\\n        return await service_proxy(request, atproto_proxy)\\n\\n    # else, normal response\\n    res: web.Response = await handler(request)\\n\\n    # inject security headers (this should really be a separate middleware, but here works too)\\n    res.headers.setdefault(\\"X-Frame-Options\\", \\\"DENY\\")\\n    res.headers.setdefault(\\"X-Content-Type-Options\\", \\\"nosniff\\")\\n    res.headers.setdefault(\\"Content-Security-Policy\\", \\\"default-src \\\"none\\"; sandbox\\")\\n    # NB: HSTS and other TLS-related headers not set, set them in nginx or wherever you terminate TLS\\n\\n    return res\\n\\n@routes.get(\\"/\\")\\ndef hello(request: web.Request):\\n    version = importlib.metadata.version(\\"millipds\\")\\n    msg = f\\"\\"\\"\\n                          ,dPYb, ,dPYb,                           8I\\n                          IP'`Yb IP'`Yb                           8I\\n                     gg   I8  8I I8  8I  gg                       8I\\n                     \\\"\\"\\"\\n                     ,ggg,,ggg,,ggg,    gg   I8 dP  I8 dP   gg   gg,gggg,      ,gggg,8I     ,gg,\\n                     \\\"\\"\\"\\n                     ,8\\" \\\"8P\\" \\\"8P\\" \\\"8,   88   I8dP   I8dP    88   I8'    ,8i  i8'    ,8I  ,8'  Yb\\n                     ,dP   8I   8I   Yb,_,88,_,d8b,_ ,d8b,_ _,88,_,I8 _  ,d8' ,d8,   ,d8b,,8'_   8) \\\n                     ,8P'   8I   8I   `Y88P\\"Y88P'\\"Y888P'\\"Y8PI8 YY88888PP'\\"Y8888P'\\"Y8P' \\\"YY8P8P\\n\\n\\nHello! This is an ATProto PDS instance, running millipds v{version}\\n\\nhttps://github.com/DavidBuchanan314/millipds\\n\\"\\"\\"\\n\\n    return web.Response(text=msg)\\n\\n@routes.get(\\"/.well-known/did.json\\")\\nasync def well_known_did_web(request: web.Request):\\n    cfg = get_db(request).config\\n    return web.json_response(\\n        {\\n            \\\"@context\\": [\\n                \\\"https://www.w3.org/ns/did/v1/\\",\\n            ],\\n            \\\"id\\": cfg[\\"pds_did\\"],\\n            \\\"service\\": [\\n                {  # is this the right thing to do?\\n                    \\\"id\\": \\\"#atproto_pds\\",\\n                    \\\"type\\": \\\"AtprotoPersonalDataServer\\",\\n                    \\\"serviceEndpoint\\": cfg[\\"pds_pfx\\"],\\n                }\\n            ],\\n        }\\n    )\\n\\n@routes.get(\\"/robots.txt\\")\\ndef robots_txt(request: web.Request):\\n    return web.Response(\\n        text=\\\"\\\\n# this is an atproto pds. please crawl it.\\n\\\\nUser-Agent: *\\nAllow: /\\n\\\\"\\\\n        )\\n\\n# browsers love to request this unprompted, so here's an answer for them\\n@routes.get(\\"/favicon.ico\\")\\ndef health(request: web.Request):\\n    return web.Response(\\n        text=\\\"\\\\n            <svg xmlns=\\\\\\\