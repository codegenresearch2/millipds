from typing import Optional, Set, Tuple\\nimport importlib.metadata\\nimport logging\\nimport asyncio\\nimport time\\nimport os\\nimport io\\nimport json\\nimport hashlib\\n\\nimport apsw\\nimport aiohttp\\nfrom aiohttp_middlewares import cors_middleware\\nfrom aiohttp import web\\nimport jwt\\n\\nimport cbrrr\\n\\nfrom . import static_config\\nfrom . import database\\nfrom . import auth_oauth\\nfrom . import atproto_sync\\nfrom . import atproto_repo\\nfrom . import util\\nfrom .appview_proxy import service_proxy\\nfrom .auth_bearer import authenticated\\nfrom .app_util import *\\n\\nlogger = logging.getLogger(__name__)\\n\\nroutes = web.RouteTableDef()\\n\\n@web.middleware\\ndef atproto_service_proxy_middleware(request: web.Request, handler):\\n    # https://atproto.com/specs/xrpc#service-proxying\\n    atproto_proxy = request.headers.get(\\"atproto-proxy\\")\\n    if atproto_proxy:\\n        return await service_proxy(request, atproto_proxy)\\n\\n    # else, normal response\\n    res: web.Response = await handler(request)\\n\\n    # inject security headers (this should really be a separate middleware, but here works too)\\n    res.headers.setdefault(\\"X-Frame-Options\", \\\"DENY\\")\\n    res.headers.setdefault(\\"X-Content-Type-Options\", \\\"nosniff\\")\\n    res.headers.setdefault(\\"Content-Security-Policy\", \\\"default-src 'none'; sandbox\\")\\n    # NB: HSTS and other TLS-related headers not set, set them in nginx or wherever you terminate TLS\\n    return res\\n\\n@routes.get(\\"/\\")\\ndef hello(request: web.Request):\\n    version = importlib.metadata.version(\\"millipds\\")\\n    msg = f\\"\\"\\"\\n                          ,dPYb, ,dPYb,                           8I\\n                          IP'`Yb IP'`Yb                           8I\\n                     gg   I8  8I I8  8I  gg                       8I\\n                     ""   I8  8' I8  8'  ""                       8I\\n  ,ggg,,ggg,,ggg,    gg   I8 dP  I8 dP   gg   gg,gggg,      ,gggg,8I     ,gg,\\n ,8\\" \\\"8P \\\"8P \\\"8,   88   I8dP   I8dP    88   I8P\\"  \\\"Yb    dP\\"  \\\"Y8I   ,8'8,\\n I8   8I   8I   8I   88   I8P    I8P     88   I8'    ,8i  i8'    ,8I  ,8'  Yb\\n,dP   8I   8I   Yb,_,88,_,d8b,_ ,d8b,_ _,88,_,I8 _  ,d8' ,d8,   ,d8b,,8'_   8) \\n8P'   8I   8I   `Y88P\\"Y88P'\\"Y888P'\\"Y888P\\"Y8PI8 YY88888PP\\"Y8888P'\\"Y8P' \\\"YY8P8P\\n\\n\\nHello! This is an ATProto PDS instance, running millipds v{version}\\n\\nhttps://github.com/DavidBuchanan314/millipds\\n\\"\\"\\"\\n\\n    return web.Response(text=msg)\\n\\n@routes.get(\\"/.well-known/did.json\\")\\nasync def well_known_did_web(request: web.Request):\\n    cfg = get_db(request).config\\n    return web.json_response(\\{\"@context\": [\\n        \\\"https://www.w3.org/ns/did/v1/\\"\\n    ], \\n    \\"id\": cfg[\\"pds_did\\"], \\n    \\"service\": [\\n        {  # is this the right thing to do?\\n            \\\"id\": \\\"#atproto_pds\", \\n            \\\"type\": \\\"AtprotoPersonalDataServer\", \\n            \\\"serviceEndpoint\": cfg[\\"pds_pfx\\"]\\n        }\\n    ]\\n    \\})\\n\\n@routes.get(\\"/robots.txt\\")\\ndef robots_txt(request: web.Request):\\n    return web.Response(text=\"\"\\"\\n# this is an atproto pds. please crawl it.\\n\\nUser-Agent: *\\nAllow: /")}\"\\n\\n@routes.get(\\"/favicon.ico\\")\\ndef health(request: web.Request):\\n    return web.Response(text=\"\\"\\"\\n            <svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 100 100\\">\\n                <text x=\\"50%\\" y=\\"0.95em\\" font-size=\\"90\\" text-anchor=\\"middle\\">üåê</text>\\n            </svg>\\n        \"\\"\\n, content_type=\\"image/svg+xml\\", headers={\\"Cache-Control\": \\\"max-age=864000\\"})\\n\\n@routes.get(\\"/xrpc/_health\\")\\ndef health(request: web.Request):\\n    version = importlib.metadata.version(\\"millipds\\")\\n    return web.json_response({\\"version\": f\\"millipds v{version}\\"})\\n\\n@routes.get(\\"/xrpc/app.bsky.actor.getPreferences\\")\\ndef actor_get_preferences(request: web.Request):\\n    return web.json_response({\\"preferences\": []})  # dummy response\\n\\n@routes.post(\\"/xrpc/app.bsky.actor.putPreferences\\")\\ndef actor_put_preferences(request: web.Request):\\n    # TODO: actually implement this\\n    return web.Response()\\n\\n@routes.get(\\"/xrpc/com.atproto.identity.resolveHandle\\")\\ndef identity_resolve_handle(request: web.Request):\\n    # TODO: forward to appview(?) if we can't answer?\\n    handle = request.query.get(\\"handle\\")\\n    if handle is None:\\n        raise web.HTTPBadRequest(text=\\"missing or invalid handle\\")\\n    did = get_db(request).did_by_handle(handle)\\n    if not did:\\n        raise web.HTTPNotFound(text=\\"no user by that handle exists on this PDS\\")\\n    return web.json_response({\\"did\": did})\\n\\n@routes.get(\\"/xrpc/com.atproto.server.describeServer\\")\\ndef server_describe_server(request: web.Request):\\n    return web.json_response(\\{\"did\": get_db(request).config[\\"pds_did\\"], \\n    \\"availableUserDomains\": []\\n    \\})\\n\\n@routes.post(\\"/xrpc/com.atproto.server.createSession\\")\\ndef server_create_session(request: web.Request):\\n    # extract the args\\n    try:\\n        req_json: dict = await request.json()\\n    except json.JSONDecodeError:\\n        raise web.HTTPBadRequest(text=\\"expected JSON\\")\\n\\n    identifier = req_json.get(\\"identifier\\")\\n    password = req_json.get(\\"password\\")\\n    if not (isinstance(identifier, str) and isinstance(password, str)):\\n        raise web.HTTPBadRequest(text=\\"invalid identifier or password\\")\\n\\n    # do authentication\\n    db = get_db(request)\\n    try:\\n        did, handle = db.verify_account_login(did_or_handle=identifier, password=password)\\n    except KeyError:\\n        raise web.HTTPUnauthorized(text=\\"user not found\\")\\n    except ValueError:\\n        raise web.HTTPUnauthorized(text=\\"incorrect identifier or password\\")\\n\\n    # prepare access tokens\\n    unix_seconds_now = int(time.time())\\n    access_jwt = jwt.encode(\\{\"scope\": \\\"com.atproto.access\", \\n        \\"aud\": db.config[\\"pds_did\\"], \\n        \\"sub\": did, \\n        \\"iat\": unix_seconds_now, \\n        \\"exp\": unix_seconds_now + 60 * 60 * 24,  # 24h\\n    \\}, db.config[\\"jwt_access_secret\\'], \\\"HS256\\")\\n\\n    refresh_jwt = jwt.encode(\\{\"scope\": \\\"com.atproto.refresh\", \\n        \\"aud\": db.config[\\"pds_did\\"], \\n        \\"sub\": did, \\n        \\"iat\": unix_seconds_now, \\n        \\"exp\": unix_seconds_now + 60 * 60 * 24 * 90,  # 90 days!\\n    \\}, db.config[\\"jwt_access_secret\\'], \\\"HS256\\")\\n\\n    return web.json_response(\\{\"did\": did, \\n        \\"handle\": handle, \\n        \\"accessJwt\": access_jwt, \\n        \\"refreshJwt\": refresh_jwt\\n    \\})\\n\\n@routes.post(\\"/xrpc/com.atproto.identity.updateHandle\\")\\n@authenticated\\ndef identity_update_handle(request: web.Request):\\n    req_json: dict = await request.json()\\n    handle = req_json.get(\\"handle\\")\\n    if handle is None:\\n        raise web.HTTPBadRequest(text=\\"missing or invalid handle\\")\\n    # TODO: actually validate it, and update the db!!!\\n    # (I'm writing this half-baked version just so I can send firehose #identity events)\\n    with get_db(request).new_con() as con:\\n        # TODO: refactor to avoid duplicated logic between here and apply_writes\\n        firehose_seq = con.execute(\\"SELECT IFNULL(MAX(seq), 0) + 1 FROM firehose\\")\\n            .fetchone()[0]\n        firehose_bytes = cbrrr.encode_dag_cbor(\\{\"t\": \\\"#identity\", \\n            \\"op\": 1\\n        \\}) + cbrrr.encode_dag_cbor(\\{\"seq\": firehose_seq, \\n            \\"did\": request[\\"authed_did\\"], \\n            \\"time\": util.iso_string_now(), \\n            \\"handle\": handle\\n        \\})\\n        con.execute(\\"INSERT INTO firehose (seq, timestamp, msg) VALUES (?, ?, ?)\", (firehose_seq, 0, firehose_bytes))\\n    await atproto_repo.firehose_broadcast(request, (firehose_seq, firehose_bytes))\\n\\n    # temp hack: #account events shouldn't really be generated here\\n    with get_db(request).new_con() as con:\\n        # TODO: refactor to avoid duplicated logic between here and apply_writes\\n        firehose_seq = con.execute(\\"SELECT IFNULL(MAX(seq), 0) + 1 FROM firehose\\")\\n            .fetchone()[0]\n        firehose_bytes = cbrrr.encode_dag_cbor(\\{\"t\": \\\"#account\", \\n            \\"op\": 1\\n        \\}) + cbrrr.encode_dag_cbor(\\{\"seq\": firehose_seq, \\n            \\"did\": request[\\"authed_did\\"], \\n            \\"time\": util.iso_string_now(), \\n            \\"active\": True\\n        \\})\\n        con.execute(\\"INSERT INTO firehose (seq, timestamp, msg) VALUES (?, ?, ?)\", (firehose_seq, 0, firehose_bytes))\\n    await atproto_repo.firehose_broadcast(request, (firehose_seq, firehose_bytes))\\n\\n    return web.Response()\\n\\n@routes.get(\\"/xrpc/com.atproto.server.getSession\\")\\n@authenticated\\ndef server_get_session(request: web.Request):\\n    return web.json_response(\\{\"handle\": get_db(request).handle_by_did(request[\\"authed_did\\"]), \\n        \\"did\": request[\\"authed_did\\"]\\n    \\})\\n\\ndef construct_app(routes, db: database.Database, client: aiohttp.ClientSession) -> web.Application:\\n    cors = cors_middleware(  # TODO: review and reduce scope - and maybe just /xrpc/*?\\n        allow_all=True, \\n        expose_headers=[\\"*\\"], \\n        allow_headers=[\\"*\\"], \\n        allow_methods=[\\"*\\"], \\n        allow_credentials=True, \\n        max_age=100_000_000, \\n    ) \\n\\n    client.headers.update(\\{\\"User-Agent\": importlib.metadata.version(\\"millipds\\")\\})\\n\\n    app = web.Application(middlewares=[cors, atproto_service_proxy_middleware]) \\n    app[MILLIPDS_DB] = db \\n    app[MILLIPDS_AIOHTTP_CLIENT] = client \\n    app[MILLIPDS_FIREHOSE_QUEUES] = set() \\n    app[MILLIPDS_FIREHOSE_QUEUES_LOCK] = asyncio.Lock() \\n    app.add_routes(routes) \\n    app.add_routes(auth_oauth.routes) \\n    app.add_routes(atproto_sync.routes) \\n    app.add_routes(atproto_repo.routes) \\n\\n    # fallback service proxying for bsky appview routes (hopefully not needed in the future, when atproto-proxy header is used) \\n    app.add_routes(\\[\\n        web.get(\\"/xrpc/app.bsky.{_:.*}?\\", service_proxy), \\n        web.post(\\"/xrpc/app.bsky.{_:.*}?\\", service_proxy), \\n    ]) \\n    return app\\n\\nasync def run(db: database.Database, client: aiohttp.ClientSession, sock_path: Optional[str], host: str, port: int):\\n    \"\"\"\\n    This gets invoked via millipds.__main__.py\\n    \"\"\"\\n    app = construct_app(routes, db, client) \\n    runner = web.AppRunner(app, access_log_format=static_config.HTTP_LOG_FMT) \\n    await runner.setup() \\n\\n    if sock_path is None:\\n        logger.info(f\\"listening on http://{host}:{port}\") \\n        site = web.TCPSite(runner, host=host, port=port) \\n    else:\\n        logger.info(f\\"listening on {sock_path}\") \\n        site = web.UnixSite(runner, path=sock_path) \\n\\n    await site.start() \\n\\n    if sock_path:\\n        # give group access to the socket (so that nginx can access it via a shared group) \\n        # see https://github.com/aio-libs/aiohttp/issues/4155#issuecomment-693979753\\n        import grp \\n        try:\\n            sock_gid = grp.getgrnam(static_config.GROUPNAME).gr_gid \\n            os.chown(sock_path, os.geteuid(), sock_gid) \\n        except KeyError:\\n            logger.warning(f\\"Failed to set socket group - group {static_config.GROUPNAME!r} not found.\\") \\n        except PermissionError:\\n            logger.warning(f\\"Failed to set socket group - are you a member of the {static_config.GROUPNAME!r} group?\\")\\n\\n        os.chmod(sock_path, 0o770) \\n\\n    while True:\\n        await asyncio.sleep(3600)  # sleep forever\\n