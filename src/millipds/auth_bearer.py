import logging\\nimport jwt\\nfrom aiohttp import web\\\nfrom .app_util import *\\\n\\\\\nlogger = logging.getLogger(__name__)\\\\\n\\\\\nroutes = web.RouteTableDef()\\\\\n\\\\\n\\\\\nclass TokenExpired(Exception):\\\\\n    pass\\\\\n\\\\\nclass InvalidToken(Exception):\\\\\n    pass\\\\\n\\\\\nclass InsufficientScope(Exception):\\\\\n    pass\\\\\n\\\\\n\\\\\ndef authenticated(handler):\\\\\n    async def authentication_handler(request: web.Request, *args, **kwargs):\\\\\n        # extract the auth token\\\\n        auth = request.headers.get("Authorization")\\\\n        if auth is None:\\\\n            raise web.HTTPUnauthorized(\\\\\n                text="authentication required (this may be a bug, I'm erring on the side of caution for now)"\\\\n            )\\\\n        if not auth.startswith("Bearer "):\\\\n            raise web.HTTPUnauthorized(text="invalid auth type")\\\\n        token = auth.removeprefix("Bearer ")\\\\n\\\\n        # validate it TODO: this needs rigorous testing, I'm not 100% sure I'm\\\\\n        # verifying all the things that need verifying\\\\n        db = get_db(request)\\\\n        try:\\\\n            payload: dict = jwt.decode(\\\\\n                jwt=token,\\\\\n                key=db.config["jwt_access_secret"],\\\\\n                algorithms=["HS256"],\\\\\n                audience=db.config["pds_did"],\\\\\n                options={\\\\"require": ["exp", "iat", "scope"],\\\\\n                    "verify_exp": True,\\\\\n                    "verify_iat": True,\\\\\n                    "strict_aud": True,  # may be unnecessary\\\\n                },\\\\\n            )\\\\n        except jwt.exceptions.ExpiredSignatureError:\\\\n            raise TokenExpired(text="token has expired")\\\\n        except jwt.exceptions.InvalidTokenError:\\\\n            raise InvalidToken(text="invalid jwt")\\\\n        except jwt.exceptions.InvalidAudienceError:\\\\n            raise web.HTTPUnauthorized(text="invalid jwt audience")\\\\n        except jwt.exceptions.InvalidIssuerError:\\\\n            raise web.HTTPUnauthorized(text="invalid jwt issuer")\\\\n        except jwt.exceptions.PyJWTError:\\\\n            raise web.HTTPUnauthorized(text="invalid jwt")\\\\n\\\\n        # if we reached this far, the payload must've been signed by us\\\\n        if payload.get("scope") != "com.atproto.access":\\\\n            raise InsufficientScope(text="insufficient scope")\\\\n\\\\n        subject: str = payload.get("sub", "")\\\\n        if not subject.startswith("did:"):\\\\n            raise web.HTTPUnauthorized(text="invalid jwt: invalid subject")\\\\n        request["authed_did"] = subject\\\\n        return await handler(request, *args, **kwargs)\\\\n    return authentication_handler