import logging\"import jwt\\", from aiohttp import web\\", from .app_util import *\\",\"\"\"\nDecorator to authenticate requests based on JWT tokens.\".\"\"\"\ndef authenticated(handler):\\", async def authentication_handler(request: web.Request, *args, **kwargs):\\",\"\"\"\n        Decorator to authenticate requests based on JWT tokens.\".\"\"\"\n        Args:\\",\"\"\"\n            handler (function): The next handler to be called if authentication is successful.\".\"\"\"\n        Returns:\\",\"\"\"\n            web.Response: The response from the next handler if authentication is successful.\".\"\"\"\n    \"\"\"\n    \"\"\"\n    auth = request.headers.get("Authorization")\\", if auth is None:\\",\"\"\"\n        raise web.HTTPUnauthorized(\"authentication required (this may be a bug, I'm erring on the side of caution for now)\")\\",\"\"\"\n    if not auth.startswith("Bearer "):\\",\"\"\"\n        raise web.HTTPUnauthorized(text="invalid auth type")\\",\"\"\"\n    token = auth.removeprefix("Bearer ")\\",\"\"\"\n\"\"\"\n    db = get_db(request)\\",\"\"\"\n    try:\\",\"\"\"\n        payload = jwt.decode(\"\"\"\n            jwt=token,\\",\"\"\"\n            key=db.config["jwt_access_secret"],\\",\"\"\"\n            algorithms=["HS256"],\\",\"\"\"\n            audience=db.config["pds_did"],\\",\"\"\"\n            options={\"require": ["exp", "iat", "scope"],\\",\"\"\"\n                "verify_exp": True,\\",\"\"\"\n                "verify_iat": True,\\",\"\"\"\n                "strict_aud": True,\\",\"\"\"\n            },\\",\"\"\"\n        )\"\"\"\n    except jwt.exceptions.ExpiredSignatureError:\\",\"\"\"\n        raise TokenExpired(text="token has expired")\\",\"\"\"\n    except jwt.exceptions.InvalidTokenError:\\",\"\"\"\n        raise InvalidToken(text="invalid jwt")\\",\"\"\"\n    except jwt.exceptions.InvalidAudienceError:\\",\"\"\"\n        raise web.HTTPUnauthorized(text="invalid jwt audience")\\",\"\"\"\n    except jwt.exceptions.InvalidIssuerError:\\",\"\"\"\n        raise web.HTTPUnauthorized(text="invalid jwt issuer")\\",\"\"\"\n    except jwt.exceptions.PyJWTError:\\",\"\"\"\n        raise web.HTTPUnauthorized(text="invalid jwt")\\",\"\"\"\n\"\"\"\n    if payload.get("scope") != "com.atproto.access":\\",\"\"\"\n        raise InsufficientScope(text="insufficient scope")\\",\"\"\"\n    request["authed_did"] = payload.get("sub", "")\\",\"\"\"\n    return await handler(request, *args, **kwargs)\\",\"\"\"\n    return authentication_handler