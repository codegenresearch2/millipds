from typing import Optional\"import logging\"import time\"import jwt\"from aiohttp import web\"from . import crypto\"from .auth_bearer import authenticated\"from .app_util import *\"logger = logging.getLogger(__name__)\"SERVICE_ROUTES = {\"did:web:api.bsky.chat#bsky_chat\": \"https://api.bsky.chat\",\n    \"did:web:discover.bsky.app#bsky_fg\": \"https://discover.bsky.app\",\n    \"did:plc:ar7c4by46qjdydhdevvrndac#atproto_labeler\": \"https://mod.bsky.app\",\n}\"@authenticated\nasync def service_proxy(request: web.Request, service: Optional[str] = None):\n    \"\"\"If `service` is None, default to bsky appview (per details in db config)\"\"\"\n    \"\"\"TODO: verify valid lexicon method?\"\"\"\n    lxm = request.path.rpartition(\"/")[2].partition(\"?\")[0]\n    logger.info(f\"proxying lxm {lxm}\")\n    db = get_db(request)\n    if service:\n        service_did = service.partition(\"#")[0]\n        service_route = SERVICE_ROUTES.get(service)\n        if service_route is None:\n            return web.HTTPBadRequest(f\"unable to resolve service {service!r}\")\n    else:\n        service_did = db.config[\"bsky_appview_did\"]\n        service_route = db.config[\"bsky_appview_pfx\"]\n    signing_key = db.signing_key_pem_by_did(request[\"authed_did\"])\n    authn = {\"Authorization\": \"Bearer \" + jwt.encode({\"iss\": request[\"authed_did\"], \"aud\": service_did, \"lxm\": lxm, \"exp\": int(time.time()) + 5 * 60,  # 5 mins\"}, signing_key, algorithm=crypto.jwt_signature_alg_for_pem(signing_key))}\n    if request.method == \"GET\":\n        async with get_client(request).get(\"{\"service_route + request.path, \"params=request.query, \"headers=authn,\"}\")\n            as r:\n            body_bytes = await r.read()  # TODO: streaming?\n            return web.Response(\"{\"body=body_bytes, \"content_type=r.content_type, \"status=r.status,\"}\")\n            # XXX: allowlist safe content types!\n    elif request.method == \"POST\":\n        request_body = await request.read()  # TODO: streaming?\n        async with get_client(request).post(\"{\"service_route + request.path, \"data=request_body, \"headers={\"Content-Type\": request.content_type},\"}\")\n            as r:\n            body_bytes = await r.read()  # TODO: streaming?\n            return web.Response(\"{\"body=body_bytes, \"content_type=r.content_type, \"status=r.status,\"}\")\n            # XXX: allowlist safe content types!\n    elif request.method == \"PUT\":\n        raise NotImplementedError(\"TODO: PUT\")\n    else:\n        raise NotImplementedError(\"TODO\")\n