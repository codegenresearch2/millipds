import apsw\nimport apsw.bestpractice\nimport cbrrr\nimport logging\nfrom atmst.blockstore import BlockStore\nfrom atmst.mst.node import MSTNode\nfrom . import static_config\nfrom . import util\nfrom . import crypto\n\n# Import statements for necessary modules\n# These imports are essential for the functionality of the code\n\n# https://rogerbinns.github.io/apsw/bestpractice.html\napsw.bestpractice.apply(apsw.bestpractice.recommended)\n\nlogger = logging.getLogger(__name__)\n\nclass DBBlockStore(BlockStore):\n    def __init__(self, db: apsw.Connection, repo: str) -> None:\n        self.db = db\n        self.user_id = self.db.execute(\n            "SELECT id FROM user WHERE did=?", (repo,)\n        ).fetchone()[0]\n\n    def get_block(self, key: bytes) -> bytes:\n        row = self.db.execute(\n            "SELECT value FROM mst WHERE repo=? AND cid=?", (self.user_id, key)\n        ).fetchone()\n        if row is None:\n            raise KeyError("block not found in db")\n        return row[0]\n\nclass Database:\n    def __init__(self, path: str = static_config.MAIN_DB_PATH) -> None:\n        logger.info(f"opening database at {path}")\n        self.path = path\n        util.mkdirs_for_file(path)\n        self.con = self.new_con()\n        self.pw_hasher = argon2.PasswordHasher()\n\n        try:\n            if self.config["db_version"] != static_config.MILLIPDS_DB_VERSION:\n                raise Exception(\n                    "unrecognised db version (TODO: db migrations)?"\n                )\n        except apsw.SQLError as e:\n            if "no such table" not in str(e):\n                raise\n            with self.con:\n                self._init_tables()\n\n    def new_con(self, readonly=False):\n        return apsw.Connection(\n            self.path,\n            flags=(apsw.SQLITE_OPEN_READONLY if readonly else apsw.SQLITE_OPEN_READWRITE | apsw.SQLITE_OPEN_CREATE)\n        )\n\n    def _init_tables(self):\n        logger.info("initing tables")