import logging\"import hashlib\"import cbrrr\"import apsw\"import asyncio\"from aiohttp import web\"from . import repo_ops\"from .appview_proxy import service_proxy\"from .auth_bearer import authenticated\"from .app_util import *\n\nlogger = logging.getLogger(__name__)\nroutes = web.RouteTableDef()\n\nasync def firehose_broadcast(request: web.Request, msg: Tuple[int, bytes]):\n    async with get_firehose_queues_lock(request):\n        queues_to_remove = set()\n        active_queues = get_firehose_queues(request)\n        for queue in active_queues:\n            try:\n                queue.put_nowait(msg)\n            except asyncio.QueueFull:\n                while not queue.empty():\n                    queue.get_nowait()\n                queue.put_nowait(None)\n                queues_to_remove.add(queue)\n        active_queues -= queues_to_remove\n